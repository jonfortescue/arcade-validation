parameters:
  GuardianPackageName: Microsoft.Guardian.Cli.0.3.2          # Optional: the name of guardian CLI pacakge (not needed if GuardianCliLocation is specified). The version is installed from packages.config under eng\common, the GuardianPackageName should be changed if the version changes.
  NugetPackageDirectory: $(Build.SourcesDirectory)\.packages # Optional: directory where NuGet packages are installed (not needed if GuardianCliLocation is specified)
  GuardianCliLocation:                                       # Optional: Direct location of Guardian CLI executable if GuardianPackageName & NugetPackageDirectory are not specified
  Repository: $(Build.Repository.Name)                       # Required: the name of the repository (e.g. dotnet/arcade)
  BranchName: master                                         # Optional: name of branch or version of gdn settings; defaults to master
  SourceDirectory: $(Build.SourcesDirectory)                 # Required: the directory where source files are located
  ArtifactsDirectory: $(Build.SourcesDirectory)\artifacts    # Required: the directory where build artifacts are located
  DncEngAccessToken: $(dn-bot-dotnet-build-rw-code-rw)       # Required: access token for dnceng; should be provided via KeyVault
  SourceToolsList:                                           # Optional: list of SDL tools to run on source code in the format @("xyz, abc,...")
  ArtifactToolsList:                                         # Optional: list of SDL tools to run on built artifacts in the format @("xyz, abc,...")
  TsaPublish: false                                          # Optional: true will publish results to TSA; only set to true after onboarding to TSA; TSA is the automated framework used to upload test results as bugs.
  TsaBranchName: $(Build.SourceBranch)                       # Optional: required for TSA publish; defaults to $(Build.SourceBranchName); TSA is the automated framework used to upload test results as bugs.
  BuildNumber: $(Build.BuildNumber)                          # Optional: required for TSA publish; defaults to $(Build.BuildNumber)
  TsaInstanceURL:                                            # Optional: only needed if TsaOnboard or TsaPublish is true; the instance-url registered with TSA; TSA is the automated framework used to upload test results as bugs.
  TsaProjectName:                                            # Optional: only needed if TsaOnboard or TsaPublish is true; the name of the project registered with TSA; TSA is the automated framework used to upload test results as bugs.
  TsaNotificationEmail:                                      # Optional: only needed if TsaOnboard is true; the email(s) which will receive notifications of TSA bug filings (e.g. alias@microsoft.com); TSA is the automated framework used to upload test results as bugs.
  TsaCodebaseAdmin:                                          # Optional: only needed if TsaOnboard or TsaPublish is true; the name of the codebase registered with TSA; TSA is the automated framework used to upload test results as bugs.
  TsaBugAreaPath:                                            # Optional: only needed if TsaOnboard is true; the area path where TSA will file bugs in AzDO; TSA is the automated framework used to upload test results as bugs.
  TsaIterationPath:                                          # Optional: only needed if TsaOnboard is true; the iteration path where TSA will file bugs in AzDO; TSA is the automated framework used to upload test results as bugs.
  TsaRepositoryName:                                         # Optional: TSA repository name; will be generated automatically if not submitted; TSA is the automated framework used to upload test results as bugs.
  TsaCodebaseName:                                           # Optional: only needed if TsaOnboard is true; the aliases which are admins of the TSA codebase (e.g. DOMAIN\alias); TSA is the automated framework used to upload test results as bugs.
  UpdateBaseline: false                                      # Optional: if true, will update the baseline in the repository; should only be run after fixing any issues which need to be fixed
  GuardianLoggerLevel: Standard                              # Optional: the logger level for the Guardian CLI; options are Trace, Verbose, Standard, Warning, and Error
  TsaOnboard: false                                          # Optional: if true, will onboard the repository to TSA; should only be run once; TSA is the automated framework used to upload test results as bugs.
  continueOnError: false                                     # optional -- determines whether to continue the build if the step errors; defaults to false
  dependsOn:                                                 # Optional: dependencies of the job

jobs:
- job: Run_SDL
  dependsOn: ${{ parameters.dependsOn }}
  displayName: Run SDL tool
  variables:
    - group: SDL_Eng_KeyVault
  steps:
  - checkout: self
    clean: true
  - powershell: eng\common\build.ps1
      -configuration Release
      -restore
      -prepareMachine
      -ci
      /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
    displayName: Windows Build / Publish
  - task: NuGetToolInstaller@1
    displayName: 'Install NuGet.exe'
  - task: NuGetCommand@2
    displayName: 'Install Guardian'
    inputs:
      restoreSolution: $(Build.SourcesDirectory)\eng\common\sdl\packages.config
      feedsToUse: config
      nugetConfigPath: $(Build.SourcesDirectory)\eng\common\sdl\NuGet.config
      externalFeedCredentials: GuardianConnect
      restoreDirectory: ${{ parameters.NugetPackageDirectory }}
  - powershell: powershell $(Build.SourcesDirectory)\eng\common\execute-all-sdl-tools.ps1
    displayName: Execute SDL
    env:
      GuardianPackageName: ${{ parameters.GuardianPackageName }}
      NugetPackageDirectory: ${{ parameters.NugetPackageDirectory }}
      GuardianCliLocation: ${{ parameters.GuardianCliLocation }}
      Repository: ${{ parameters.Repository }}
      BranchName:  ${{ parameters.BranchName }}
      SourceDirectory: ${{ parameters.SourceDirectory }}
      ArtifactsDirectory: ${{ parameters.ArtifactsDirectory }}
      DncEngAccessToken: ${{ parameters.DncEngAccessToken }}
      SourceToolsList: ${{ parameters.SourceToolsList }}
      ArtifactToolsList: ${{ parameters.ArtifactToolsList }}
      TsaPublish: ${{ parameters.TsaPublish }}
      TsaBranchName: ${{ parameters.TsaBranchName }}
      BuildNumber: ${{ parameters.BuildNumber }}
      TsaInstanceURL: ${{ parameters.TsaInstanceURL }}
      TsaProjectName: ${{ parameters.TsaProjectName }}
      TsaNotificationEmail: ${{ parameters.TsaNotificationEmail }}
      TsaCodebaseAdmin: ${{ parameters.TsaCodebaseAdmin }}
      TsaBugAreaPath: ${{ parameters.TsaBugAreaPath }}
      TsaIterationPath: ${{ parameters.TsaIterationPath }}
      TsaRepositoryName: ${{ parameters.TsaRepositoryName }}
      TsaCodebaseName: ${{ parameters.TsaCodebaseName }}
      UpdateBaseline: ${{ parameters.UpdateBaseline }}
      GuardianLoggerLevel: ${{ parameters.GuardianLoggerLevel }}
      TsaOnboard: ${{ parameters.TsaOnboard }}
    continueOnError: ${{ parameters.continueOnError }}
